/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Maintenance;

import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organisation.MaintenanceOrganisation;
import Business.Organisation.Organisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MaintenanceRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.HeadlessException;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ajaygoel
 */
public class MaintenanceRequestsWAJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MaintenanceWAJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    MaintenanceOrganisation organization;
    Enterprise enterprise;
    Ecosystem business;

    MaintenanceRequestsWAJPanel(JPanel userProcessContainer, UserAccount account, Organisation organization, Enterprise enterprise, Ecosystem business) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = (MaintenanceOrganisation) organization;
        this.enterprise = enterprise;
        this.business = business;
        populateTable();
        populateComboBox();
    }

    public void populateTable() {

        System.out.println(organization.getWorkQueue().getReqList().size());

        DefaultTableModel dtm = (DefaultTableModel) MaintenanceJTable.getModel();
        //  productCatalogTbl.getColumn("Image").setCellRenderer(new ManageProductsJPanel.LabelRenderer());
        dtm.setRowCount(0);

        for (Iterator<WorkRequest> it = organization.getWorkQueue().getReqList().iterator(); it.hasNext();) {
            MaintenanceRequest wr = (MaintenanceRequest) it.next();
            Object Row[] = new Object[7];
            Row[0] = wr.getCust();
            Row[1] = wr.getCust().getHouse_no();
            Row[2] = wr.getMessage();
            Row[3] = wr;
            Row[4] = wr.getReqCharges();
            Row[5] = wr.getReceiver();
            Row[6] = wr.getStatus();
            dtm.addRow(Row);

        }

    }

    public void populateComboBox() {
        for (Employee e : organization.getEmpList().getEmployeeDirectory()) {
            AvailablePersonComboBox.addItem(e);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MaintenanceJTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        cancelOrderJBtn = new javax.swing.JButton();
        AssignBtn = new javax.swing.JButton();
        AvailablePersonComboBox = new javax.swing.JComboBox<>();
        completeReqJBtn = new javax.swing.JButton();
        mainChargeJTxtField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Manage Maintenance:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Maintenance Requests:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 44, -1, -1));

        MaintenanceJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Detail", "House No", "Maintenance Description", "Request Date", "Charges", "Assigned To", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(MaintenanceJTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 79, 917, 126));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 223, -1, -1));

        cancelOrderJBtn.setText("Cancel Request");
        cancelOrderJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderJBtnActionPerformed(evt);
            }
        });
        add(cancelOrderJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 271, 131, -1));

        AssignBtn.setText("Assign to:");
        AssignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignBtnActionPerformed(evt);
            }
        });
        add(AssignBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(583, 223, 131, -1));

        add(AvailablePersonComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(732, 224, 175, -1));

        completeReqJBtn.setText("Complete");
        completeReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeReqJBtnActionPerformed(evt);
            }
        });
        add(completeReqJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 223, -1, -1));
        add(mainChargeJTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 220, 100, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Maintenance Charge: ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 227, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/random.jpg"))); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void cancelOrderJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderJBtnActionPerformed
        int row = MaintenanceJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) AvailablePersonComboBox.getSelectedItem();
        WorkRequest wr = (WorkRequest) MaintenanceJTable.getValueAt(row, 3);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already closed and can cot be cancelled", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        wr.setStatus("CANCELLED");
        Date date = new Date();
        wr.setResolveDate(date);
        wr.setMessage("The request has been cancelled by maintenance admin.");

                wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been successfully cancelled", "Information", JOptionPane.INFORMATION_MESSAGE);

        populateTable();
    }//GEN-LAST:event_cancelOrderJBtnActionPerformed

    private void AssignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignBtnActionPerformed
        // TODO add your handling code here:
        int row = MaintenanceJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) AvailablePersonComboBox.getSelectedItem();
        WorkRequest wr = (WorkRequest) MaintenanceJTable.getValueAt(row, 3);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already completed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            emp.getWorkQueue().getReqList().add(wr);
            System.out.println(emp.getEmpUserAcc().getUserName());
            System.out.println("emp size: " + emp.getWorkQueue().getReqList().size());
            //  Row[4]= em.getEmpUserAcc().getWorkQueue().getReqList().size())
            wr.setReceiver(emp.getEmpUserAcc());
            wr.setSender(account);
            JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

            populateTable();

        } else if (wr.getReceiver().equals(emp.getEmpUserAcc())) {
            JOptionPane.showMessageDialog(null, "The request is already assigned to you", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {

            emp.getWorkQueue().getReqList().add(wr);
            if (wr.getReceiver() != null) {
                wr.getReceiver().getWorkQueue().getReqList().remove(wr);
            }
            System.out.println(emp.getEmpUserAcc().getUserName());
            wr.setReceiver(emp.getEmpUserAcc());
            wr.setSender(account);
                    wr.getCust().getNotification().addNotification(wr);

            JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

            populateTable();
        }

    }//GEN-LAST:event_AssignBtnActionPerformed

    private void completeReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeReqJBtnActionPerformed
        // TODO add your handling code here:

        int row = MaintenanceJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        MaintenanceRequest wr = (MaintenanceRequest) MaintenanceJTable.getValueAt(row, 3);
        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "This request has already been closed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign to a user first then resolve.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        double charges = 0;
        try {
            charges = Double.parseDouble(mainChargeJTxtField.getText());
        } catch (NumberFormatException numberFormatException) {

            JOptionPane.showMessageDialog(null, "Please enter a valid value in number format.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;

        }

        wr.setStatus("CLOSED");
        wr.setMessage("The maintenance request have been successfully closed. Please contact society admin for any issue.Request charge- $ " + charges);
        Date resolveDate = new Date();
        wr.setResolveDate(resolveDate);
        wr.setReqCharges(charges);
//        double walletAcc= wr.getCust().getWallet();
//        double newWalletAmt= walletAcc-charges;
//        wr.getCust().setWallet(newWalletAmt);

        wr.getCust().debitMoney(wr, charges);

        organization.setMoneyBalance(charges);

        wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been completed. Request charge- $ " + charges, "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        populateTable();

    }//GEN-LAST:event_completeReqJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignBtn;
    private javax.swing.JComboBox<Object> AvailablePersonComboBox;
    private javax.swing.JTable MaintenanceJTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton cancelOrderJBtn;
    private javax.swing.JButton completeReqJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mainChargeJTxtField;
    // End of variables declaration//GEN-END:variables
}
