/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;

import Business.Customer.Customer;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Organisation.EventManagementOrganization;
import Business.Organisation.Organisation;
import Business.UserAccount.UserAccount;
import Business.Utility.Event;
import Business.WorkQueue.EventMgmtWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ankit
 */
public class EventManagementJPanel extends javax.swing.JPanel {

    /**
     * Creates new form EventManagementJPanel
     */
    public EventManagementJPanel() {
    }
    JPanel userProcessContainer;
    Enterprise enterprise;
    Ecosystem business;
    Customer customer;
    UserAccount account;

    EventManagementJPanel(JPanel userProcessContainer, Enterprise enterprise, Ecosystem business, Customer customer, UserAccount account) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.enterprise=enterprise;
        this.business=business;
        this.customer=customer;
        this.account=account;
        
        populateTable();
    }
    
    public void populateTable() {

        DefaultTableModel dtm = (DefaultTableModel) eventListJTable.getModel();

        dtm.setRowCount(0);

        for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
            if (org instanceof EventManagementOrganization) {
                for (WorkRequest wr : org.getWorkQueue().getReqList()) {
                    EventMgmtWorkRequest ewr = (EventMgmtWorkRequest) wr;
                    Object[] row = new Object[7];
                    row[0] = ewr;
                    row[1] = ewr.getEvents().getEventDescription();
                    row[2] = ewr.getEvents().getLocation();
                    row[3] = ewr.getEvents().getVacantSeat();
                    row[4] = ewr.getEvents().getStatus();
                    row[5] = ewr.getEvents().getEventDate();
                    
                    if( ewr.getEvents().getEventAdmin().equals(customer)){
                        row[6]="ADMIN";
                    }
                    else if(customer.getMyEvents().contains(ewr.getEvents())){
                        row[6]="ATTENDING";
                    }
                    else{
                       row[6]="NOT ATTENDING";

                    }

                    if(ewr.getEvents().getEventAdmin().equals(customer)||!ewr.getEvents().getStatus().equals("DELETED")){
                    dtm.addRow(row);
                    }
                }
            }
        }
    }
    
    public void populateChatBox(){
        chatArea.setText("");
               int row = eventListJTable.getSelectedRow();


             EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        for(String str:event.getEventChatBox()){
            chatArea.append(str);
            chatArea.append("\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        eventListJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        createEventJBtn = new javax.swing.JButton();
        viewEventJBtn = new javax.swing.JButton();
        deleteEventJBtn = new javax.swing.JButton();
        bookSeatsJBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        chatArea = new javax.swing.JTextArea();
        newChatJTxtField = new javax.swing.JTextField();
        submitChatJBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        cancelBooking = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Event Management");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        eventListJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Event Name", "Description", "Location", "Available Seats", "Event Status", "Date", "Booking Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        eventListJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eventListJTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(eventListJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 93, 1060, 109));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Your Events: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 58, -1, -1));

        createEventJBtn.setText("Create New Event");
        createEventJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createEventJBtnActionPerformed(evt);
            }
        });
        add(createEventJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        viewEventJBtn.setText("View Event Details");
        viewEventJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewEventJBtnActionPerformed(evt);
            }
        });
        add(viewEventJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(149, 220, -1, -1));

        deleteEventJBtn.setText("Delete Event");
        deleteEventJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEventJBtnActionPerformed(evt);
            }
        });
        add(deleteEventJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 220, -1, -1));

        bookSeatsJBtn.setText("Book Seat");
        bookSeatsJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookSeatsJBtnActionPerformed(evt);
            }
        });
        add(bookSeatsJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(927, 220, -1, -1));

        chatArea.setEditable(false);
        chatArea.setColumns(20);
        chatArea.setRows(5);
        jScrollPane2.setViewportView(chatArea);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 296, 390, 270));

        newChatJTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newChatJTxtFieldActionPerformed(evt);
            }
        });
        add(newChatJTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, 300, -1));

        submitChatJBtn.setText("Send");
        submitChatJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitChatJBtnActionPerformed(evt);
            }
        });
        add(submitChatJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 570, 77, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Event Chat Box: ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 261, -1, -1));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, -1, -1));

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 10, 1));
        add(jSpinner1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1026, 221, 44, -1));

        cancelBooking.setText("Cancel Booking");
        cancelBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBookingActionPerformed(evt);
            }
        });
        add(cancelBooking, new org.netbeans.lib.awtextra.AbsoluteConstraints(804, 220, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/event-management.jpg"))); // NOI18N
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1330, 1050));
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void viewEventJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewEventJBtnActionPerformed
        // TODO add your handling code here:
                     int row = eventListJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        ViewEventDetailsJPanel vpdjp = new ViewEventDetailsJPanel(userProcessContainer, event);
        userProcessContainer.add("ViewEventDetailsJPanel", vpdjp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
        
    }//GEN-LAST:event_viewEventJBtnActionPerformed

    private void submitChatJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitChatJBtnActionPerformed
        // TODO add your handling code here:
        int row = eventListJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            newChatJTxtField.setText("");
            return;
        }
        String chat= newChatJTxtField.getText();
        
        if(chat.equals("")){
            System.out.println("in chatbox");
            return;
        }
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        
        
        Date date= new Date();
        
        String custDet=null;
        if(event.getEventAdmin().equals(customer)){
            custDet="ADMIN";
        }
        
        else{
            custDet=customer.toString();
        }
        String msg= "< "+custDet+" >: "+chat;
        
        event.getEventChatBox().add(msg);
        
        populateChatBox();
        newChatJTxtField.setText("");
        
        
        
    }//GEN-LAST:event_submitChatJBtnActionPerformed

    private void createEventJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createEventJBtnActionPerformed
        // TODO add your handling code here:
        CreateNewEventJPanel cnjp = new CreateNewEventJPanel(userProcessContainer, enterprise, business, customer, account);
        userProcessContainer.add("CustomerNotificationJPanel", cnjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_createEventJBtnActionPerformed

    private void deleteEventJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEventJBtnActionPerformed
        // TODO add your handling code here:
              int row = eventListJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        if(!event.getEventAdmin().equals(customer)){
           JOptionPane.showMessageDialog(null, "You can only delete the events created by you.", "Warning", JOptionPane.WARNING_MESSAGE);
           return;  
        }
        
       if (!event.getStatus().equals("PENDING")) {
            JOptionPane.showMessageDialog(null, "Only work requests pending at admin can be deleted", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
       
       event.setStatus("DELETED");
       wr.setStatus("CANCELLED");
       wr.setMessage("The event has beed removed by customer");
       Date date =new Date();
       wr.setResolveDate(date);
       customer.getNotification().addNotification(wr);
       
       
       JOptionPane.showMessageDialog(null, "The event has been successfully deleted", "Success", JOptionPane.INFORMATION_MESSAGE);
       populateTable();

       
       
        
        
    }//GEN-LAST:event_deleteEventJBtnActionPerformed

    private void bookSeatsJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookSeatsJBtnActionPerformed
        // TODO add your handling code here:
        int row = eventListJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        String bookStatus=(String) eventListJTable.getValueAt(row, 6);
        
        if(bookStatus.equals("ADMIN")){
              JOptionPane.showMessageDialog(null, "You are already admin of this event", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
            
        }
        
        if(bookStatus.equals("ATTENDING")){
            JOptionPane.showMessageDialog(null, "This event is already added in your list. Please book another", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
            
        }
        
        if(event.getStatus().equals("DELETED")){
            JOptionPane.showMessageDialog(null, "This event has been deleted by the admin. Please book another", "Warning", JOptionPane.WARNING_MESSAGE);
            return;  
        }
         int seats= (int)jSpinner1.getValue();
                 
         if(seats<1||seats>event.getVacantSeat()){
            JOptionPane.showMessageDialog(null, "Please book at least one seat and no more than total available seats.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;  
        }
         
        
        
        customer.getMyEvents().add(event);
       
        event.bookSeat(seats,customer);
        
        JOptionPane.showMessageDialog(null, "Your seats have been successfully booked for this event.", "Warning", JOptionPane.WARNING_MESSAGE);

        populateTable();
    }//GEN-LAST:event_bookSeatsJBtnActionPerformed

    private void cancelBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBookingActionPerformed
        // TODO add your handling code here:
        
             int row = eventListJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        String bookStatus=(String) eventListJTable.getValueAt(row, 6);
        
        if(bookStatus.equals("ADMIN")){
              JOptionPane.showMessageDialog(null, "You can only delete the event as you are ADMIN.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
            
        }
        
             if(bookStatus.equals("NOT ATTENDING")){
              JOptionPane.showMessageDialog(null, "You are already in not attendees list", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
            
        }
             
                 if(event.getStatus().equals("DELETED")){
            JOptionPane.showMessageDialog(null, "This event has been deleted by the admin. No deed to cancel.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;  
        }
                 
                 customer.getMyEvents().remove(event);
                 event.deleteBooking(customer);
                 
                 
       JOptionPane.showMessageDialog(null, "Your booking has been successfully cancelled for this event.", "Success", JOptionPane.WARNING_MESSAGE);

        populateTable();
             
             
        
        
        
        
        
    }//GEN-LAST:event_cancelBookingActionPerformed

    private void eventListJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eventListJTableMouseClicked
        // TODO add your handling code here:
        populateChatBox();
        
    }//GEN-LAST:event_eventListJTableMouseClicked

    private void newChatJTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newChatJTxtFieldActionPerformed
        // TODO add your handling code here:
        int row = eventListJTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            newChatJTxtField.setText("");
            return;
        }
        String chat= newChatJTxtField.getText();
        
        if(chat.equals("")){
            System.out.println("in chatbox");
            return;
        }
        EventMgmtWorkRequest wr = (EventMgmtWorkRequest) eventListJTable.getValueAt(row, 0);
        
        Event event= wr.getEvents();
        
        
        
        Date date= new Date();
        
        String custDet=null;
        if(event.getEventAdmin().equals(customer)){
            custDet="ADMIN";
        }
        
        else{
            custDet=customer.toString();
        }
        String msg= "< "+custDet+" >: "+chat;
        
        event.getEventChatBox().add(msg);
        
        populateChatBox();
        newChatJTxtField.setText("");
        
        
    }//GEN-LAST:event_newChatJTxtFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton bookSeatsJBtn;
    private javax.swing.JButton cancelBooking;
    private javax.swing.JTextArea chatArea;
    private javax.swing.JButton createEventJBtn;
    private javax.swing.JButton deleteEventJBtn;
    private javax.swing.JTable eventListJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField newChatJTxtField;
    private javax.swing.JButton submitChatJBtn;
    private javax.swing.JButton viewEventJBtn;
    // End of variables declaration//GEN-END:variables
}
