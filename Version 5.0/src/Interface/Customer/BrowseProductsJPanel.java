/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.Customer.Product;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organisation.DeliveryOrganisation;
import Business.Organisation.Grocery.GroceryOrganisation;
import Business.Organisation.Grocery.GroceryProduct;
import Business.Organisation.Organisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.DeliverWorkRequest;
import Interface.Retailer.ManageProductsJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Image;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author ajaygoel
 */
public class BrowseProductsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BrowseProductsJPanel
     */
    JPanel userProcessContainer;
    GroceryOrganisation groceryOrganisation;
    Customer customer;
    UserAccount ua;
    Ecosystem business;
    int flag=0;

    BrowseProductsJPanel(JPanel userProcessContainer, Customer customer, Ecosystem business, UserAccount account, GroceryOrganisation groceryOrganisation) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.groceryOrganisation = groceryOrganisation;
        this.customer = customer;
        this.ua = account;
        this.business = business;
        populate_table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productJTbl = new javax.swing.JTable();
        backJBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        QtyTextField = new javax.swing.JTextField();
        ConfirmBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        ThresholdTxtField = new javax.swing.JTextField();
        Refill_box = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Browse Products");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        productJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Model Number", "Price", "Availablity", "Image"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productJTbl);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 44, 1000, 340));

        backJBtn.setText("Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });
        add(backJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 559, -1, -1));

        jLabel2.setText("Product Quantity :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 455, -1, -1));
        add(QtyTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(337, 452, 48, -1));

        ConfirmBtn.setText("Click to confirm >>");
        ConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmBtnActionPerformed(evt);
            }
        });
        add(ConfirmBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 559, 194, -1));

        jLabel3.setText("Set Threshold Limit:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(223, 490, -1, -1));
        add(ThresholdTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 490, 48, -1));

        Refill_box.setText("Auto Refill");
        add(Refill_box, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 518, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/products-module-image.jpg"))); // NOI18N
        jLabel4.setText("jLabel4");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 400, 670, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populate_table() {
        DefaultTableModel dtm = (DefaultTableModel) productJTbl.getModel();
        productJTbl.getColumn("Image").setCellRenderer(new BrowseProductsJPanel.LabelRenderer());
        dtm.setRowCount(0);

        for (GroceryProduct gp : groceryOrganisation.getGroceryProductDirectory()) {
            JLabel label = new JLabel();
            label.setBounds(100, 100, 200, 200);
            ImageIcon i1 = new ImageIcon(gp.getImgLoc());
            Image img = i1.getImage();
            Image newImg = img.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
            ImageIcon iFinal = new ImageIcon(newImg);
            label.setIcon(iFinal);

            Object Row[] = new Object[5];
            Row[0] = gp;
            Row[1] = gp.getModelNumber();
            Row[2] = gp.getPrice();
            Row[3] = gp.getAvail();
            Row[4] = label;
            dtm.addRow(Row);
        }

    }
    
        class LabelRenderer implements TableCellRenderer{

        @Override
        public Component getTableCellRendererComponent(JTable jtable, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            TableColumn tc= productJTbl.getColumn("Image");
            tc.setMinWidth(200);
            tc.setMaxWidth(200);
            productJTbl.setRowHeight(200);
            
            return (Component)value;
        }
        
        
    }
        


    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        Interface.Customer.CustomerGroceriesWA1JPanel el1 = (Interface.Customer.CustomerGroceriesWA1JPanel) component;
        el1.populate_table();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);

    }//GEN-LAST:event_backJBtnActionPerformed


    private void ConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmBtnActionPerformed
        // TODO add your handling code here:
        
        try{
            int quantity = Integer.parseInt(QtyTextField.getText());
        int threshHold = Integer.parseInt(ThresholdTxtField.getText());
        
        
        boolean auto;
        if(Refill_box.isSelected())
        {
            auto=true;
        }
        else
        {
            auto=false;
        }

        int row = productJTbl.getSelectedRow();
        GroceryProduct gp2 = (GroceryProduct) productJTbl.getValueAt(row, 0);

        if (gp2.getAvail() < quantity) {
            JOptionPane.showMessageDialog(null, "Please select the valid quantity!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        } else {
            
            if (row < 0) {
                JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            } else {

                if (customer.getProdList().isEmpty()) {
                    Product p2 = customer.addProduct();
                    //Product p2= new Product();
                    p2.setName(gp2.getProdName());
                    p2.setPrice(gp2.getPrice() * quantity);
                    p2.setProductQuant(quantity);
                    p2.setThreshold(threshHold);
                    p2.setOrder_status("Pending at Grocery Market");
                    p2.setAvail(quantity);
                    p2.setQuantity_left(quantity);
                    p2.setProdName(gp2.getProdName());
                    p2.setAuto_refill(auto);
                    System.out.println(gp2.getProdName());
                    gp2.setAvail(gp2.getAvail() - quantity);

                    DeliverWorkRequest request = new DeliverWorkRequest();
                    request.setMessage("Pending at Grocery Market");
                    request.setSender(customer.getUserAcc());
                    request.setStatus("Pending at Grocery Market");
                    request.setProduct(p2);
                    request.setCust(customer);
                    Date date = new Date();
                    request.setRequestDate(date);
                    request.getCust().debitMoney(request,(double)(gp2.getPrice() * quantity));
//                Organisation org = null;
//
//                if (org != null) {
//                    org.getWorkQueue().getReqList().add(request);
                    groceryOrganisation.getWorkQueue().getReqList().add(request);
                    customer.getWorkList().getReqList().add(request);

                    //}
                    populate_table();
                    JOptionPane.showMessageDialog(null, "Order Placed !!", "Information", JOptionPane.INFORMATION_MESSAGE);

                } else {
                    // for (Product pr : customer.getProdList()) {
                    for (int i = 0; i < customer.getProdList().size(); i++) {
                        Product pr = customer.getProdList().get(i);
                        if (gp2.getProdName().equals(pr.getProdName())&&(pr.getAuto_refill()==true)) {
                            flag=1;
                            JOptionPane.showMessageDialog(null, "Product already ordered..!! If you want to increase quantity change it into Change Requirements panel.", "Information", JOptionPane.INFORMATION_MESSAGE);
                            //break;

                        } }
                    if(flag==0)
                            {
                            Product prod = customer.addProduct();
                            prod.setName(gp2.getProdName());
                            prod.setPrice(gp2.getPrice() * quantity);
                            prod.setProductQuant(quantity);
                            prod.setThreshold(threshHold);
                            prod.setOrder_status("Pending at Grocery Market");
                            prod.setAvail(quantity);
                            prod.setAuto_refill(auto);
                            prod.setQuantity_left(quantity);
                            
                            
//                            pr.setPrice(gp2.getPrice() * quantity);
//                            pr.setProductQuant(quantity);
//                            pr.setThreshold(threshHold);
//                            pr.setOrder_status("Pending at Grocery Market");
//                            pr.setAvail(quantity + pr.getAvail());
//                            pr.setQuantity_left(pr.getQuantity_left() + quantity);
                            gp2.setAvail(gp2.getAvail() - quantity);

                            DeliverWorkRequest request = new DeliverWorkRequest();
                            request.setMessage("Pending at Grocery Market");
                            request.setSender(customer.getUserAcc());
                            request.setStatus("Pending at Grocery Market");
                            request.setProduct(prod);
                            System.out.println(request.getResolveDate()+" HI "+request.getProduct().getProductQuant());
                            request.setCust(customer);
                            Date date = new Date();
                            request.setRequestDate(date);
                            request.getCust().debitMoney(request,(double)(gp2.getPrice() * quantity));
                            flag=1;
//                        Organisation org = null;
//
//                        if (org != null) {
                            //org.getWorkQueue().getReqList().add(request);
                            groceryOrganisation.getWorkQueue().getReqList().add(request);
                            customer.getWorkList().getReqList().add(request);

                            populate_table();
                            JOptionPane.showMessageDialog(null, "Order Placed !!", "Information", JOptionPane.INFORMATION_MESSAGE);
                            //break;
                         
                        }
//            if (row < 0) {
//                JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
//                return;
//            } else {
//
//                if (customer.getProdList().isEmpty()) {
//                    Product p2 = customer.addProduct();
//                    //Product p2= new Product();
//                    p2.setName(gp2.getProdName());
//                    p2.setPrice(gp2.getPrice() * quantity);
//                    p2.setProductQuant(quantity);
//                    p2.setThreshold(threshHold);
//                    p2.setOrder_status("Pending at Grocery Market");
//                    p2.setAvail(quantity);
//                    p2.setQuantity_left(quantity);
//                    p2.setProdName(gp2.getProdName());
//                    System.out.println(gp2.getProdName());
//                    gp2.setAvail(gp2.getAvail() - quantity);
//
//                    DeliverWorkRequest request = new DeliverWorkRequest();
//                    request.setMessage("Pending at Grocery Market");
//                    request.setSender(customer.getUserAcc());
//                    request.setStatus("Pending at Grocery Market");
//                    request.setProduct(p2);
//                    request.setCust(customer);
//                    Date date = new Date();
//                    request.setRequestDate(date);
//                    request.getCust().debitMoney(request,(double)(gp2.getPrice() * quantity));
////                Organisation org = null;
////
////                if (org != null) {
////                    org.getWorkQueue().getReqList().add(request);
//                    groceryOrganisation.getWorkQueue().getReqList().add(request);
//                    customer.getWorkList().getReqList().add(request);
//
//                    //}
//                    populate_table();
//                    JOptionPane.showMessageDialog(null, "Order Placed !!", "Information", JOptionPane.INFORMATION_MESSAGE);
//
//                } else {
//                    // for (Product pr : customer.getProdList()) {
//                    for (int i = 0; i < customer.getProdList().size(); i++) {
//                        Product pr = customer.getProdList().get(i);
//                        if (gp2.getProdName().equals(pr.getProdName())) {
//                            
//                            Product prod = customer.addProduct();
//                            prod.setPrice(gp2.getPrice() * quantity);
//                            prod.setProductQuant(quantity);
//                            prod.setThreshold(threshHold);
//                            prod.setOrder_status("Pending at Grocery Market");
//                            prod.setAvail(quantity + pr.getAvail());
//                            prod.setQuantity_left(pr.getQuantity_left() + quantity);
//                            
//                            
////                            pr.setPrice(gp2.getPrice() * quantity);
////                            pr.setProductQuant(quantity);
////                            pr.setThreshold(threshHold);
////                            pr.setOrder_status("Pending at Grocery Market");
////                            pr.setAvail(quantity + pr.getAvail());
////                            pr.setQuantity_left(pr.getQuantity_left() + quantity);
//                            gp2.setAvail(gp2.getAvail() - quantity);
//
//                            DeliverWorkRequest request = new DeliverWorkRequest();
//                            request.setMessage("Pending at Grocery Market");
//                            request.setSender(customer.getUserAcc());
//                            request.setStatus("Pending at Grocery Market");
//                            request.setProduct(prod);
//                            System.out.println(request.getResolveDate()+" HI "+request.getProduct().getProductQuant());
//                            request.setCust(customer);
//                            Date date = new Date();
//                            request.setRequestDate(date);
//                            request.getCust().debitMoney(request,(double)(gp2.getPrice() * quantity));
//                            flag=1;
////                        Organisation org = null;
////
////                        if (org != null) {
//                            //org.getWorkQueue().getReqList().add(request);
//                            groceryOrganisation.getWorkQueue().getReqList().add(request);
//                            customer.getWorkList().getReqList().add(request);
//
//                            populate_table();
//                            JOptionPane.showMessageDialog(null, "Order Placed !!", "Information", JOptionPane.INFORMATION_MESSAGE);
//                            break;
//
//                        } }
//                    if(flag==0)
//                            {
//                            Product p2 = customer.addProduct();
//                            //Product p2= new Product();
//                            p2.setName(gp2.getProdName());
//                            p2.setPrice(gp2.getPrice() * quantity);
//                            p2.setProductQuant(quantity);
//                            p2.setThreshold(threshHold);
//                            p2.setOrder_status("Pending at Grocery Market");
//                            p2.setAvail(quantity);
//                            p2.setQuantity_left(quantity);
//                            p2.setProdName(gp2.getProdName());
//                            System.out.println(gp2.getProdName());
//                            gp2.setAvail(gp2.getAvail() - quantity);
//
//                            DeliverWorkRequest request = new DeliverWorkRequest();
//                            request.setMessage("Pending at Grocery Market");
//                            request.setSender(customer.getUserAcc());
//                            request.setStatus("Pending at Grocery Market");
//                            request.setProduct(p2);
//                            System.out.println(request.getResolveDate()+" HI "+request.getProduct().getProductQuant());
//                            request.setCust(customer);
//                            Date date = new Date();
//                            request.setRequestDate(date);
//                            request.getCust().debitMoney(request,(double)(gp2.getPrice() * quantity));
////                        Organisation org = null;
////
////                        if (org != null) {
////                            org.getWorkQueue().getReqList().add(request);
//                            groceryOrganisation.getWorkQueue().getReqList().add(request);
//                            customer.getWorkList().getReqList().add(request);
////                        }
//                            JOptionPane.showMessageDialog(null, "Order Placed !!", "Information", JOptionPane.INFORMATION_MESSAGE);
//                            populate_table();
//                         
//                        }
                            
                    //}
                }

            }
        }
        }
        catch(NumberFormatException e)
        {
            JOptionPane.showMessageDialog(null,"Please enter data in integers");
        }
    }//GEN-LAST:event_ConfirmBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConfirmBtn;
    private javax.swing.JTextField QtyTextField;
    private javax.swing.JCheckBox Refill_box;
    private javax.swing.JTextField ThresholdTxtField;
    private javax.swing.JButton backJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable productJTbl;
    // End of variables declaration//GEN-END:variables
}
