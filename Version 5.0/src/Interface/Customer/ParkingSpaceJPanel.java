/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;

import Business.Customer.Customer;
import Business.Customer.Parking;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Organisation.Organisation;
import Business.Organisation.ParkingOrganisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ParkingRequest;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ankit
 */
public class ParkingSpaceJPanel extends javax.swing.JPanel {

    private HashMap<String, String> sourceloc = new HashMap<>();
    private HashMap<String, String> destinationloc = new HashMap<>();
    Browser browser = new Browser();
    BrowserView browserView = new BrowserView(browser);

    /**
     * Creates new form ParkingSpaceJPanel
     */
    JPanel userProcessContainer;
    Enterprise enterprise;
    Ecosystem business;
    Customer customer;
    UserAccount account;

    ParkingSpaceJPanel(JPanel userProcessContainer, Enterprise enterprise, Ecosystem business, Customer customer, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.account = account;
        this.business = business;
        this.customer = customer;

        createsourcemap();
        createdestinationmap();
        populatesourcecombobox();
        populatedestinationcombobox();
        destinationjComboBox();

        showpathjPanel.add(browserView, BorderLayout.CENTER);
        showpathjPanel.setVisible(true);
        browser.loadURL("https://www.google.com/maps/@42.3369968,-71.0913747,13z");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        showpathjPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        sourcejComboBox = new javax.swing.JComboBox();
        showjButton = new javax.swing.JButton();
        destinationjComboBox = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        availParkingSlots = new javax.swing.JTextField();
        neededSlotsJTxtField = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 255));
        setForeground(new java.awt.Color(255, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Parking Space");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        showpathjPanel.setBackground(new java.awt.Color(153, 153, 153));
        showpathjPanel.setPreferredSize(new java.awt.Dimension(900, 600));
        showpathjPanel.setLayout(new java.awt.BorderLayout());
        add(showpathjPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 121, 881, 532));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Home Location");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 720, 141, -1));

        add(sourcejComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 717, 150, -1));

        showjButton.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        showjButton.setText("Show Driving Distance");
        showjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showjButtonActionPerformed(evt);
            }
        });
        add(showjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 755, 246, -1));

        destinationjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationjComboBoxActionPerformed(evt);
            }
        });
        add(destinationjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(176, 763, 150, -1));

        jButton2.setText("Back");
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 804, 111, 25));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Parking Location");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 763, 148, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Available Parking Slot: ");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 718, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Needed Parking Slot: ");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 764, -1, -1));

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Book Parking Slot");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 804, -1, -1));

        availParkingSlots.setEditable(false);
        add(availParkingSlots, new org.netbeans.lib.awtextra.AbsoluteConstraints(753, 717, 100, -1));
        add(neededSlotsJTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(756, 763, 100, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
               userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerSocieryInteractionJPanel csijp = (CustomerSocieryInteractionJPanel) component;
        csijp.populateComboBox();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void showjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showjButtonActionPerformed

        Object strr = (Object) sourcejComboBox.getSelectedItem();
        Object strr1 = (Object) destinationjComboBox.getSelectedItem();
        String sourcelocation = (String) sourceloc.get(strr);
        String destinationlocation = (String) destinationloc.get(strr1);

        updategooglemap(sourcelocation, destinationlocation);
    }//GEN-LAST:event_showjButtonActionPerformed

    private void destinationjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationjComboBoxActionPerformed
        // TODO add your handling code here:
        String strr1 = (String) destinationjComboBox.getSelectedItem();
        if (strr1 == null) {
            strr1 = (String) destinationloc.get(strr1);
        }

        try {

            for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
                if (org instanceof ParkingOrganisation) {
                    ParkingOrganisation parkOrg = (ParkingOrganisation) org;
                    System.out.println("parkorg= " + parkOrg.getParkSlots().size());
                    for (Parking park : parkOrg.getParkSlots()) {

                        if (strr1.equals(park.getLocation())) {
                            availParkingSlots.setText(Integer.toString(park.getNumOfAvailableLoc()));
                        }
                    }

                }

            }
        } catch (Exception e) {
            System.out.println("Strrr1= " + strr1);

        }

    }//GEN-LAST:event_destinationjComboBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int bookSlot = 0;

        try {
            bookSlot = Integer.parseInt(neededSlotsJTxtField.getText());
        } catch (NumberFormatException numberFormatException) {

            JOptionPane.showMessageDialog(null, "Please enter a valid number.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;

        }

        int avalSlots = Integer.parseInt(availParkingSlots.getText());

        if (bookSlot > avalSlots) {
            JOptionPane.showMessageDialog(null, "Please enter needed slot in range of available slots.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String parking = (String) destinationjComboBox.getSelectedItem();

        for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
            if (org instanceof ParkingOrganisation) {
                ParkingOrganisation parkOrg = (ParkingOrganisation) org;
                System.out.println("parkorg= " + parkOrg.getParkSlots().size());
                for (Parking park : parkOrg.getParkSlots()) {

                    if (parking.equals(park.getLocation())) {
                        park.bookParking(bookSlot);
                    }
                }

            }

        }

        ParkingRequest pr = new ParkingRequest();
        customer.getWorkList().getReqList().add(pr);
        pr.setCust(customer);
        pr.setMessage("Please book the mentioned space for parking");
        pr.setNumOfSlots(bookSlot);
        pr.setParkingLoc(parking);
        Date requestDate = new Date();
        pr.setRequestDate(requestDate);
        pr.setSender(account);
        pr.setStatus("OPEN");
        customer.addParking(pr.getParkingLoc(), pr.getNumOfSlots());


        for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
            if (org instanceof ParkingOrganisation) {
                org.getWorkQueue().getReqList().add(pr);
//                for (UserAccount ua : org.getUserAccountDir().getUserAccountDirectory()) {
//                    if (ua.getRole().toString().equals("ParkingAdmin")) {
//                        pr.setReceiver(ua);
//                        ua.getWorkQueue().getReqList().add(pr);
//
//                    }
//                }
            }
        }
      customer.getNotification().addNotification(pr);


        JOptionPane.showMessageDialog(null, "The parking slot booking admin has sent to admin.", "Information", JOptionPane.INFORMATION_MESSAGE);


        destinationjComboBox();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void populatesourcecombobox() {
        String st = customer.getStreet();

        sourcejComboBox.removeAllItems();
        Set set = sourceloc.entrySet();
        Iterator iterator = set.iterator();
        while (iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry) iterator.next();
            String key = (String) mentry.getKey();
            if (key.equalsIgnoreCase(st)) {

                sourcejComboBox.addItem(mentry.getKey());
            }
        }
    }

    public void populatedestinationcombobox() {

        destinationjComboBox.removeAllItems();
        // destinationjComboBox.addItem("Select"); 

        Set set = destinationloc.entrySet();
        Iterator iterator = set.iterator();
        while (iterator.hasNext()) {
            Map.Entry mentry = (Map.Entry) iterator.next();
            destinationjComboBox.addItem(mentry.getKey());

        }
    }

    public void createsourcemap() {

        sourceloc.put("Clearway Street", "Clearway+street");
        sourceloc.put("Boston Harbour", "Boston+harbour");
        sourceloc.put("NorthEnd", "Northend");
        sourceloc.put("Washigton street", "Washington+street");
        sourceloc.put("Oliver street", "Oliver+street");
        sourceloc.put("Aquarium", "New+England+Aquarium");
        sourceloc.put("Fort Point", "Fort+Point");
        sourceloc.put("Stuart street", "Stuart+street");
        sourceloc.put("St Germaine Street", "St+Germaine+Street");

    }

    public void createdestinationmap() {
        destinationloc.put("Clearway Street", "Clearway+street");
        destinationloc.put("Boston Harbour", "Boston+harbour");
        destinationloc.put("NorthEnd", "Northend");
        destinationloc.put("Washigton street", "Washington+street");
        destinationloc.put("Oliver street", "Oliver+street");
        destinationloc.put("Aquarium", "New+England+Aquarium");
        destinationloc.put("Fort Point", "Fort+Point");
        destinationloc.put("Stuart street", "Stuart+street");
        destinationloc.put("St Germaine Street", "St+Germaine+Street");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          

    public void updategooglemap(String source, String destination) {

        showpathjPanel.add(browserView, BorderLayout.CENTER);
        showpathjPanel.setVisible(true);
        browser.loadURL("https://www.google.com/maps/dir/" + source + "+/" + destination + "/@42.3401129,-71.0967984,13z");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField availParkingSlots;
    private javax.swing.JComboBox destinationjComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField neededSlotsJTxtField;
    private javax.swing.JButton showjButton;
    private javax.swing.JPanel showpathjPanel;
    private javax.swing.JComboBox sourcejComboBox;
    // End of variables declaration//GEN-END:variables

    private void destinationjComboBox() {

       
        Object strr1 = (Object) destinationjComboBox.getSelectedItem();
        
        System.out.println("dest set: "+ strr1);

        for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
            if (org instanceof ParkingOrganisation) {
                ParkingOrganisation parkOrg = (ParkingOrganisation) org;
                System.out.println("parkorg= " + parkOrg.getParkSlots().size());
                for (Parking park : parkOrg.getParkSlots()) {
                      System.out.println("Park loc set: "+ park.getLocation());

                    if (strr1.equals(park.getLocation())) {
                        availParkingSlots.setText(Integer.toString(park.getNumOfAvailableLoc()));
                    }
                }

            }

        }
        
        System.out.println("ava set: "+ availParkingSlots.getText());

    }
}
