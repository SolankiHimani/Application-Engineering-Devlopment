/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;

import Business.Customer.Customer;
import Business.Customer.Parking;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organisation.GarbageOrganisation;
import Business.Organisation.MaintenanceOrganisation;
import Business.Organisation.Organisation;
import Business.Organisation.ParkingOrganisation;
import Business.Role.Role;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MaintenanceRequest;
import Business.WorkQueue.ParkingRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ankit
 */
public class CustomerSocieryInteractionJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerSocieryInteractionJPanel
     */
    public CustomerSocieryInteractionJPanel() {
    }

    JPanel userProcessContainer;
    Enterprise enterprise;
    Ecosystem business;
    Customer customer;
    UserAccount account;

    CustomerSocieryInteractionJPanel(JPanel userProcessContainer, Enterprise enterprise, Ecosystem business, Customer customer, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.customer = customer;
        this.business = business;
        this.account = account;
        populateFields();
        populateComboBox();
        populateSecurityComboBox();
        if (customer.getGarbageDetails().getGarbageContainerWeight() > customer.getGarbageDetails().getGarbageContainerThreshold()) {
            addGarbageJBtn.setEnabled(false);

        }
    }

    public void populateSecurityComboBox() {

        secStaffJComboBox.removeAllItems();

        for (WorkRequest wr : customer.getWorkList().getReqList()) {
            if (wr.getReceiver() != null) {

                if (wr.getStatus().equals("CLOSED") && wr.getReceiver().getRole().toString().equals(Role.RoleType.SecurityAdmin.getValue())) {

                    secStaffJComboBox.addItem(wr.getMessage());
                } else if (wr.getStatus().equals("CLOSED") && wr.getReceiver().getRole().toString().equals(Role.RoleType.SecurityStaff.getValue())) {

                    secStaffJComboBox.addItem(wr.getMessage());
                }
            }

        }

    }

    public void populateComboBox() {
        HashMap<String, Integer> mp = customer.getParkingSlot();
        parkingListJComboBox.removeAllItems();

        System.out.println("mp = " + mp);
        Iterator it = mp.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            String parking = pair.getKey() + " : " + pair.getValue();
            //System.out.println(pair.getKey() + " = " + pair.getValue());
            parkingListJComboBox.addItem(parking);
            //  it.remove(); // avoids a ConcurrentModificationException
        }
    }

    public void populateFields() {

        garbageDetJTxtField.setText(Integer.toString(customer.getGarbageDetails().getGarbageContainerWeight()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        garbageDetJTxtField = new javax.swing.JTextField();
        addGarbageJBtn = new javax.swing.JButton();
        addedGarbageValueJTxtField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainReqTxtArea = new javax.swing.JTextArea();
        maintReqJBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        parkinReqJBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        securityReqJBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        parkingListJComboBox = new javax.swing.JComboBox<>();
        clearJBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        secStaffJComboBox = new javax.swing.JComboBox<>();
        manageEventsJButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(0, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Society Request Manager");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Garbage Details: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 62, 230, -1));
        add(garbageDetJTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 59, 166, -1));

        addGarbageJBtn.setText("Add Garbage");
        addGarbageJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGarbageJBtnActionPerformed(evt);
            }
        });
        add(addGarbageJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 58, 150, 22));
        add(addedGarbageValueJTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(621, 59, 30, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Maintenance Request: ");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 98, 230, -1));

        mainReqTxtArea.setColumns(20);
        mainReqTxtArea.setRows(5);
        jScrollPane1.setViewportView(mainReqTxtArea);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 98, 160, 110));

        maintReqJBtn.setText("Send Request");
        maintReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maintReqJBtnActionPerformed(evt);
            }
        });
        add(maintReqJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 98, 150, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Parking Space Required:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 222, 230, -1));

        parkinReqJBtn.setText("Request Parking Space");
        parkinReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parkinReqJBtnActionPerformed(evt);
            }
        });
        add(parkinReqJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 218, 180, -1));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Security: ");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 263, 100, -1));

        securityReqJBtn.setText("Security Staff Data");
        securityReqJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityReqJBtnActionPerformed(evt);
            }
        });
        add(securityReqJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 259, 180, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Previous Bookings: ");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 222, 140, -1));

        add(parkingListJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 220, 200, -1));

        clearJBtn.setText("Clear");
        clearJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJBtnActionPerformed(evt);
            }
        });
        add(clearJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 220, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Security Staff Details:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 263, 180, -1));

        add(secStaffJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 260, 200, -1));

        manageEventsJButton.setText("Manage Events");
        manageEventsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEventsJButtonActionPerformed(evt);
            }
        });
        add(manageEventsJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 300, 180, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Events: ");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 300, 90, -1));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/Request-Your-Tutorial-Its-FOSS.jpg"))); // NOI18N
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 310, 800, 450));
    }// </editor-fold>//GEN-END:initComponents

    private void addGarbageJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGarbageJBtnActionPerformed
        // TODO add your handling code here:
        int addWt = 0;

        if (addedGarbageValueJTxtField.getText().equals("")) {
            addWt = 1;
        } else {
            try {
                addWt = Integer.parseInt(addedGarbageValueJTxtField.getText());
            } catch (NumberFormatException numberFormatException) {
                JOptionPane.showMessageDialog(null, "Please enter a valid value in number format or leave it blank.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;

            }

        }

        customer.getGarbageDetails().addGarbage(addWt);
        populateFields();

        if (customer.getGarbageDetails().getGarbageContainerWeight() > customer.getGarbageDetails().getGarbageContainerThreshold()) {
            addGarbageJBtn.setEnabled(false);
            // TODO SHOW message --  pleasewait till garbage container has been emptied. the request has been sen to the society.
            JOptionPane.showMessageDialog(null, "The request has been sent to the society. Please wait till garbage container has been emptied.", "Information", JOptionPane.INFORMATION_MESSAGE);

            WorkRequest garReq = new WorkRequest();
            customer.getWorkList().getReqList().add(garReq);

            // TODO add parameters
            garReq.setCust(customer);
            garReq.setMessage("Clear the garbage bin of customer: at " + customer.getLocation());
            Date date = new Date();
            garReq.setRequestDate(date);
            garReq.setStatus("OPEN");
            garReq.setSender(account);

            for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
                if (org instanceof GarbageOrganisation) {
                    org.getWorkQueue().getReqList().add(garReq);
                    for (UserAccount ua : org.getUserAccountDir().getUserAccountDirectory()) {
                        if (ua.getRole().toString().equals("GarbageAdmin")) {
                            garReq.setReceiver(ua);
                            ua.getWorkQueue().getReqList().add(garReq);

                        }
                    }
                }
            }
            
            customer.getNotification().addNotification(garReq);
        }
    }//GEN-LAST:event_addGarbageJBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CustomerWAJPanel cwajp = (CustomerWAJPanel) component;
        cwajp.showJBadgeButton();
        cwajp.populateComboBox();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void maintReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maintReqJBtnActionPerformed
        // TODO add your handling code here:

       
        String msg = mainReqTxtArea.getText();
        
        if (msg.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter a message to be sent to maintenance staff.", "Warning", JOptionPane.WARNING_MESSAGE);

            return;
        }

        MaintenanceRequest mr = new MaintenanceRequest();
        customer.getWorkList().getReqList().add(mr);

        mr.setCust(customer);
        mr.setSender(account);

        mr.setMessage(msg);
        Date date = new Date();
        mr.setRequestDate(date);
        mr.setStatus("OPEN");

        for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
            if (org instanceof MaintenanceOrganisation) {
                org.getWorkQueue().getReqList().add(mr);
//                 for (UserAccount ua : org.getUserAccountDir().getUserAccountDirectory()) {
//                        if (ua.getRole().toString().equals("Maintenance")) {
//                            mr.setReceiver(ua);
//
//                        }
//                    }

            }
       customer.getNotification().addNotification(mr);

        }

        JOptionPane.showMessageDialog(null, "The maintenance request has been sent to seciety. It will be resolved soon", "Information", JOptionPane.INFORMATION_MESSAGE);
        mainReqTxtArea.setText("");


    }//GEN-LAST:event_maintReqJBtnActionPerformed

    private void parkinReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parkinReqJBtnActionPerformed
        // TODO add your handling code here:

        System.out.println("parking 123= " + customer.getParkingSlot());

        if (customer.totalParkingBooked() >= customer.getParkingThreshold()) {
            JOptionPane.showMessageDialog(null, "You have reached the booking threshold. Please clear some old parking space to book again.", "Warning", JOptionPane.WARNING_MESSAGE);

            return;
        }

        ParkingSpaceJPanel iccgwajp = new ParkingSpaceJPanel(userProcessContainer, enterprise, business, customer, account);
        userProcessContainer.add("ParkingSpaceJPanel", iccgwajp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);


    }//GEN-LAST:event_parkinReqJBtnActionPerformed

    private void clearJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJBtnActionPerformed
        // TODO add your handling code here:

        String str = (String) parkingListJComboBox.getSelectedItem();

                String[] list = null;
        try {
            list = str.split("\\s:");
        } catch (Exception e) {
             JOptionPane.showMessageDialog(null, "There is no requets to clear.", "Warning", JOptionPane.WARNING_MESSAGE);

            return; 
        }

        String location = list[0];

        String[] list2 = list[list.length - 1].split("\\s");


        int slots = Integer.parseInt(list2[list.length - 1]);


         ParkingOrganisation parkOrg = null;
        for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
            if (org instanceof ParkingOrganisation) {
                parkOrg = (ParkingOrganisation) org;
                for (Parking park : parkOrg.getParkSlots()) {
                    String parkLoc = park.getLocation();
                    if (location.equalsIgnoreCase(parkLoc)) {
                        park.clearParking(slots);
                    }
                }

            }

        }
        customer.getParkingSlot().remove(location);
        for (WorkRequest wr : customer.getWorkList().getReqList()) {
            if (wr instanceof ParkingRequest) {
                ParkingRequest pr = (ParkingRequest) wr;
                if (pr.getParkingLoc().equals(location) && pr.getStatus().equals("OPEN")) {
                    pr.setStatus("CANCELLED");
                    pr.setMessage("This request has been cancelled by customer.");
                }
            }
        }

        populateComboBox();
        JOptionPane.showMessageDialog(null, "The selected parkinh spot has been cleared.", "Information", JOptionPane.INFORMATION_MESSAGE);



    }//GEN-LAST:event_clearJBtnActionPerformed

    private void securityReqJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityReqJBtnActionPerformed
        // TODO add your handling code here:
        
        WorkRequest wr = new WorkRequest();
        wr.setCust(customer);
        wr.setMessage("Please get security staff details from my area.");
        wr.setStatus("OPEN");

        UserAccount rec = null;
        UserAccount send = null;

        Network network = customer.getNetworkName();

        for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (e.getEnterpriseType().getValue().equals("Security")) {
                for (UserAccount ua : e.getUserAccountDir().getUserAccountDirectory()) {
                    System.out.println("Receiver is " + ua.getUserName());

                    rec = ua;
                }
            }
            if (e.getEnterpriseType().getValue().equals("Society")) {

                for (UserAccount ua : e.getUserAccountDir().getUserAccountDirectory()) {
                    System.out.println("Sender is " + ua.getUserName());
                    send = ua;
                }
            }
        }

        wr.setReceiver(rec);
        wr.setSender(send);
        send.getWorkQueue().getReqList().add(wr);
        rec.getWorkQueue().getReqList().add(wr);
        customer.getWorkList().getReqList().add(wr);
        customer.getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been sent to security.", "Information", JOptionPane.INFORMATION_MESSAGE);


    }//GEN-LAST:event_securityReqJBtnActionPerformed

    private void manageEventsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEventsJButtonActionPerformed
        // TODO add your handling code here:
        EventManagementJPanel iccgwajp = new EventManagementJPanel(userProcessContainer, enterprise, business, customer, account);
        userProcessContainer.add("EventManagementJPanel", iccgwajp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_manageEventsJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addGarbageJBtn;
    private javax.swing.JTextField addedGarbageValueJTxtField;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearJBtn;
    private javax.swing.JTextField garbageDetJTxtField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea mainReqTxtArea;
    private javax.swing.JButton maintReqJBtn;
    private javax.swing.JButton manageEventsJButton;
    private javax.swing.JButton parkinReqJBtn;
    private javax.swing.JComboBox<String> parkingListJComboBox;
    private javax.swing.JComboBox<String> secStaffJComboBox;
    private javax.swing.JButton securityReqJBtn;
    // End of variables declaration//GEN-END:variables
}
