/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Customer;

import Business.Customer.Customer;
import Business.Customer.Product;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organisation.GarbageOrganisation;
import Business.Organisation.Organisation;
import Business.UserAccount.UserAccount;
import Business.Utility.Wallet;
import Business.WorkQueue.DeliverWorkRequest;
import Business.WorkQueue.ElectricityWorkRequest;
import Business.WorkQueue.MaintenanceRequest;
import Business.WorkQueue.ParkingRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Container;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javafx.scene.chart.BubbleChart;
import javafx.scene.chart.NumberAxis;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.BubbleXYItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.XYZDataset;



/**
 *
 * @author ajaygoel
 */
public class CustomerAnalyticsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerAnalyticsJPanel
     */
    JPanel userProcessContainer;
    Ecosystem business;
    Customer customer;
    UserAccount account;
    GarbageOrganisation garbageOrganisation;

    CustomerAnalyticsJPanel(JPanel userProcessContainer, Enterprise enterprise, Ecosystem business, Customer customer, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.customer = customer;
        this.business = business;
        this.account = account;

        for (Network n : business.getNetworkDirectory()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                for (Organisation ee : e.getOrganisationDirectory().getOrganizationlist()) {
                    if (ee instanceof GarbageOrganisation) {
                        garbageOrganisation = (GarbageOrganisation) ee;
                    }
                }
            }
        }

        populate_table();
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        ProductsOrderedLineGraph = new javax.swing.JButton();
        DeliveryTime = new javax.swing.JButton();
        GarbageRequestsBtn = new javax.swing.JButton();
        backJBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        WRTable = new javax.swing.JTable();
        electricityLineJBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel1.setText("Analytics Panel");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(443, 11, -1, -1));

        jButton1.setText("Bar Graph - Pending vs Delivered Requests");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 327, -1));

        ProductsOrderedLineGraph.setText("Products Quantity Ordered Bar Graph");
        ProductsOrderedLineGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProductsOrderedLineGraphActionPerformed(evt);
            }
        });
        add(ProductsOrderedLineGraph, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 80, 327, -1));

        DeliveryTime.setText("Delivery Time vs Product Quantity");
        DeliveryTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeliveryTimeActionPerformed(evt);
            }
        });
        add(DeliveryTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 80, 327, -1));

        GarbageRequestsBtn.setText("Garbage OPEN vs CLOSED");
        GarbageRequestsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GarbageRequestsBtnActionPerformed(evt);
            }
        });
        add(GarbageRequestsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 121, 327, -1));

        backJBtn.setText("Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });
        add(backJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 21, -1, -1));

        WRTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Receiver", "Request Date", "Resolve Date", "Status", "Message"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(WRTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 234, 1091, 566));

        electricityLineJBtn.setText("Electricity Bill based on Days Line Graph");
        electricityLineJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                electricityLineJBtnActionPerformed(evt);
            }
        });
        add(electricityLineJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 121, 327, -1));

        jButton2.setText("Money Transaction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 162, 327, -1));

        jButton3.setText("Products vs Work Requests");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(355, 162, 327, -1));

        jButton4.setText("Total types of Work Requests");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 120, 327, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populate_table() {
        DefaultTableModel dtm = (DefaultTableModel) WRTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest wr : customer.getWorkList().getReqList()) {
            Object Row[] = new Object[6];
            Row[0] = wr.getProduct();
            Row[1] = wr.getReceiver();
            Row[2] = wr.getRequestDate();
            Row[3] = wr.getResolveDate();
            Row[4] = wr.getStatus();
            Row[5] = wr.getMessage();
            dtm.addRow(Row);

        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        int Delivered_req = 0;
        int cancelled = 0;
        int other_req = 0;

        for (WorkRequest wr : customer.getWorkList().getReqList()) {
            if (wr instanceof DeliverWorkRequest) {
                if (wr.getStatus().equals("Delivered")) {
                    Delivered_req++;
                } else if (wr.getStatus().equals("Cancelled")) {
                    cancelled++;
                } else {
                    other_req++;
                }
            }

        }

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(Delivered_req, "Requests", "Delivered");
        dataset.setValue(cancelled, "Requests", "Cancelled");
        dataset.setValue(other_req, "Requests", "Pending");

        JFreeChart chart = ChartFactory.createBarChart("Requests Type Analysis", "Request names", "Requests", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ProductsOrderedLineGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProductsOrderedLineGraphActionPerformed
        // TODO add your handling code here:

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //HashMap<Integer, String> hm = new HashMap<Integer, String>();
        
        HashMap<String,Integer> hm = new HashMap<String,Integer>();
        HashMap<String,Integer> hm2 = new HashMap<String,Integer>();
        
        
        JFreeChart chart = ChartFactory.createBarChart3D("Requests Type Analysis", "Products:", "Quantity:", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
                for(WorkRequest wr : customer.getWorkList().getReqList())    
                        {
                            if(wr instanceof DeliverWorkRequest)
                            {
                                System.out.println(wr.getProduct().getName()+"----------->"+wr.getProduct().getProductQuant());
                                hm.put(wr.getProduct().getName(),wr.getProduct().getProductQuant());
                                dataset.setValue(wr.getProduct().getProductQuant(), "Qty", wr.getProduct().getName());
                            }
                            
                        }
                
            
            
            

    }//GEN-LAST:event_ProductsOrderedLineGraphActionPerformed

    private void DeliveryTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeliveryTimeActionPerformed
        // TODO add your handling code here:

        TimeSeries s1 = new TimeSeries("Delivery time vs Quantity(Products):");
        HashMap<Date, Integer> hm = new HashMap<Date, Integer>();
        TimeSeriesCollection dataset1 = new TimeSeriesCollection();
        final JFreeChart chart1 = ChartFactory.createTimeSeriesChart("Quantity vs Time",
                "Timestamp",
                "Quantity of Products:", dataset1,
                true,
                true,
                false);

        for (WorkRequest wr : customer.getWorkList().getReqList()) {
            if (wr.getProduct() != null && wr.getResolveDate() != null) {
                System.out.println(wr.getResolveDate() + " HI " + wr.getProduct().getProductQuant());

                hm.put(wr.getResolveDate(), wr.getProduct().getProductQuant());
                s1.add(new Millisecond(wr.getResolveDate()), wr.getProduct().getProductQuant());
            }
        }
        dataset1.addSeries(s1);

        ChartFrame frame1 = new ChartFrame("Chart For Analysis", chart1);
        frame1.setVisible(true);
        frame1.setSize(800, 680);
        XYPlot p1 = chart1.getXYPlot();
        p1.setRangeGridlinePaint(Color.BLACK);


    }//GEN-LAST:event_DeliveryTimeActionPerformed

    private void GarbageRequestsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GarbageRequestsBtnActionPerformed
        // TODO add your handling code here:

        int closed = 0;
        int open = 0;
        for (WorkRequest wr : customer.getWorkList().getReqList()) {
            for (WorkRequest wr1 : garbageOrganisation.getWorkQueue().getReqList()) {
                if (wr1 == wr) {
                    if (wr.getStatus().equals("CLOSED")) {
                        closed++;
                    } else {
                        open++;
                    }
                }
            }
        }
        
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        pieDataset.setValue("OPEN", new Integer(open));
        pieDataset.setValue("CLOSED", new Integer(closed));
        //pieDataset.setValue("Three",new Integer(30));
        //pieDataset.setValue("Four",new Integer(40));

        JFreeChart chart = ChartFactory.createPieChart("Garbage Requests Pi Chart", pieDataset, true, true, true);
        PiePlot P = (PiePlot) chart.getPlot();
        //p.setForegroundAlpha(TOP_ALIGNMENT);
        ChartFrame frame = new ChartFrame("Pie Chart Requests", chart);
        frame.setVisible(true);
        frame.setSize(450, 500);

    }//GEN-LAST:event_GarbageRequestsBtnActionPerformed

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:

        userProcessContainer.remove(this);
        //Component[] componentArray = userProcessContainer.getComponents();
        //Component component = componentArray[componentArray.length - 1];
        //Interface.Customer.CustomerGroceriesWA1JPanel el1 = (Interface.Customer.CustomerGroceriesWA1JPanel) component;
        //el1.populate_table();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void electricityLineJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_electricityLineJBtnActionPerformed
        // TODO add your handling code here:
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //HashMap<Integer, String> hm = new HashMap<Integer, String>();
        
        HashMap<Double,Integer> hm = new HashMap<Double,Integer>();
        
        JFreeChart chart = ChartFactory.createLineChart("Electricity Days vs Cost", "Days:", "Cost:", dataset, PlotOrientation.VERTICAL, false, true, false);
        chart.setBackgroundPaint(Color.cyan);
        chart.getTitle().setPaint(Color.RED);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Line Chart for Electricity Bill Generation", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
            
                for(WorkRequest wr : customer.getWorkList().getReqList())    
                        {
                            if(wr instanceof ElectricityWorkRequest)
                            {
                                //System.out.println(wr.getProduct().getName()+"----------->"+wr.getProduct().getProductQuant());
                                hm.put(((ElectricityWorkRequest) wr).getReqCharges(),((ElectricityWorkRequest) wr).getElec_bill_days());
                                Double charges = ((ElectricityWorkRequest) wr).getReqCharges();
                                int charges2= charges.intValue();
                                int days = ((ElectricityWorkRequest) wr).getElec_bill_days();
                                String days2 = String.valueOf(days);
                                System.out.println(days2+"----------"+charges2);
                                dataset.setValue(charges2,"Charges:",days2);
                            }
                            
                        }
                
        
        
    }//GEN-LAST:event_electricityLineJBtnActionPerformed

    
     private XYZDataset createDataset() {
    DefaultXYZDataset dataset = new DefaultXYZDataset();

    
    
                    for(WorkRequest wr : customer.getWorkList().getReqList())    
                        {
                            if(wr instanceof ElectricityWorkRequest)
                            {   
                                Double charges = ((ElectricityWorkRequest) wr).getReqCharges();
                                int charges1 = (int) ((ElectricityWorkRequest) wr).getReqCharges();
                                int days = ((ElectricityWorkRequest) wr).getElec_bill_days();
                                Double days2 = (double)days;
                                //dataset.setValue(charges,"Charges:",days2);
                                dataset.addSeries("Electricity", new double[][] { { days }, { charges1 }, { 10 } });      
                                //dataset.addSeries("Electricity", new double[][] { { 30 }, { 20 }, { 50 } });      
                            }
                            
                        }
                    
              //dataset.addSeries("Electricity", new double[][] { { 10 }, { 30 }, { 50 } });      
//    dataset.addSeries("INDIA", new double[][] { 
//      { 40 }, // X-Value 
//      { 65 }, // Y-Value 
//      { 70 }  // Z-Value 
//     });
//    dataset.addSeries("USA", new double[][] { { 30 }, { 20 }, { 50 } });
//    dataset.addSeries("CHINA", new double[][] { { 80 }, { 50 }, { 80 } });
//    dataset.addSeries("JAPAN", new double[][] { { 11 }, { 50 }, { 20 } });

    return dataset;
  }
     public void setContentPane(Container contentPane) {
        getRootPane().setContentPane(contentPane);
    }
     
     
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        TimeSeries s1 = new TimeSeries("Time vs Money");
        TimeSeriesCollection dataset1 = new TimeSeriesCollection();
        final JFreeChart chart1 = ChartFactory.createTimeSeriesChart("Time vs Money",
                "Timestamp",
                "Money", dataset1,
                true,
                true,
                false);

        
         //dataset.setValue(charges2,"Charges:",days2);
         Wallet wallet= customer.getWalletObj();
        LinkedHashMap<WorkRequest, Double> mp = wallet.getTransactionList();

        Iterator it = mp.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            WorkRequest wr = (WorkRequest) pair.getKey();
            double amt = (double) pair.getValue();
            if(wr.getResolveDate()!=null)
            {
                s1.add(new Millisecond(wr.getResolveDate()), amt);
            }
            
        }dataset1.addSeries(s1);

        ChartFrame frame1 = new ChartFrame("Chart For Analysis of transaction of Money", chart1);
        frame1.setVisible(true);
        frame1.setSize(800, 680);
        XYPlot p1 = chart1.getXYPlot();
        p1.setRangeGridlinePaint(Color.BLACK);
            
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //HashMap<String,Integer> hm = new HashMap<String,Integer>();
        
        
        JFreeChart chart = ChartFactory.createAreaChart("Requests numbers vs Products", "Products:", "Number of Requests:", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests and Products", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        int prod=0;
        DeliverWorkRequest dwr;
            
                for(Product pp:customer.getProdList())
                {
                    for(WorkRequest wr : customer.getWorkList().getReqList())    
                        {
                            if(wr instanceof DeliverWorkRequest)
                            //dwr=(DeliverWorkRequest) wr; 
                            //if(dwr!=null)
                            {
                                System.out.println(wr.getProduct().getName());
                                System.out.println(pp.getProdName());
                                
                                if(wr.getProduct().getName().equals(pp.getName()))
                                {   
                                    prod++;
                                    //hm.put(wr.getProduct().getName(),wr.getProduct().getProductQuant());
                                }
                                
                            }
                            
                        }
                    dataset.setValue(prod, "Qty", pp.getName());
                    prod=0;
                
                }
                
                
                
                
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
           DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        //HashMap<String,Integer> hm = new HashMap<String,Integer>();
        
        
        JFreeChart chart = ChartFactory.createBarChart3D("Requests Number vs Requests Type", "Types:", "Number of Requests:", dataset, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.black);
        ChartFrame frame = new ChartFrame("Bar Chart for Requests and Products", chart);
        frame.setVisible(true);
        frame.setSize(450, 350);
        int del_req=0;
        int elec_req=0;
        int main_req=0;
        int park_req=0;
        int water_req=0;
        
                    for(WorkRequest wr : customer.getWorkList().getReqList())    
                        {
                            if(wr instanceof DeliverWorkRequest)
                            {   
                                del_req++;
                            }
                            else if(wr instanceof ElectricityWorkRequest)
                            {   
                                elec_req++;
                            }
                            else if(wr instanceof MaintenanceRequest)
                            {   
                                main_req++;
                            }
                            else if(wr instanceof ParkingRequest)
                            {   
                                park_req++;
                            }
                            else
                            {   
                                water_req++;
                            }
                            
                            
                            
                        }
                    dataset.setValue(del_req, "Requests","Delivery");
                    dataset.setValue(elec_req, "Requests","Electricity");
                    dataset.setValue(main_req, "Requests","Maintenance");
                    dataset.setValue(park_req, "Requests","Parking");
                    dataset.setValue(water_req, "Requests","Water");
                
                

    }//GEN-LAST:event_jButton4ActionPerformed

       


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DeliveryTime;
    private javax.swing.JButton GarbageRequestsBtn;
    private javax.swing.JButton ProductsOrderedLineGraph;
    private javax.swing.JTable WRTable;
    private javax.swing.JButton backJBtn;
    private javax.swing.JButton electricityLineJBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
