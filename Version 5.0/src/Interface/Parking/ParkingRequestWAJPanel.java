/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Parking;

import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organisation.Organisation;
import Business.Organisation.ParkingOrganisation;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ParkingRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ankit
 */
public class ParkingRequestWAJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ParkingRequestWAJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    ParkingOrganisation organization;
    Enterprise enterprise;
    Ecosystem business;

    public ParkingRequestWAJPanel(JPanel userProcessContainer, UserAccount account, Organisation organization, Enterprise enterprise, Ecosystem business) {

        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = (ParkingOrganisation) organization;
        this.enterprise = enterprise;
        this.business = business;
        populateTable();
        populateComboBox();

    }

    public void populateTable() {

        System.out.println(organization.getWorkQueue().getReqList().size());

        DefaultTableModel dtm = (DefaultTableModel) parkingReqJTbl.getModel();
        //  productCatalogTbl.getColumn("Image").setCellRenderer(new ManageProductsJPanel.LabelRenderer());
        dtm.setRowCount(0);

        for (Iterator<WorkRequest> it = organization.getWorkQueue().getReqList().iterator(); it.hasNext();) {
            ParkingRequest wr = (ParkingRequest) it.next();
            Object Row[] = new Object[7];
            Row[0] = wr.getCust();
            Row[1] = wr.getNumOfSlots();
            Row[2] = wr.getParkingLoc();
            Row[3] = wr.getStatus();
            Row[4] = wr.getMessage();
            Row[5] = wr;
            Row[6] = wr.getReceiver();
            dtm.addRow(Row);

        }

    }

    public void populateComboBox() {
        for (Employee e : organization.getEmpList().getEmployeeDirectory()) {
            parkingStaffJComboBox.addItem(e);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backJBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        parkingReqJTbl = new javax.swing.JTable();
        completeJBtn = new javax.swing.JButton();
        assignToJBtn = new javax.swing.JButton();
        parkingStaffJComboBox = new javax.swing.JComboBox<>();
        parkingChargesJTxtField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 153, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Parking Request Manager");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        backJBtn.setText("Back");
        backJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJBtnActionPerformed(evt);
            }
        });
        add(backJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 172, -1, -1));

        parkingReqJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer", "Parking Slot", "Parking Area", "Request Status", "Request Message", "Request Date", "Assigned To"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(parkingReqJTbl);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 46, 773, 108));

        completeJBtn.setText("Complete");
        completeJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeJBtnActionPerformed(evt);
            }
        });
        add(completeJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(124, 172, -1, -1));

        assignToJBtn.setText("Assign To: ");
        assignToJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToJBtnActionPerformed(evt);
            }
        });
        add(assignToJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(514, 172, -1, -1));

        add(parkingStaffJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(617, 173, 166, -1));
        add(parkingChargesJTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(352, 173, 80, -1));

        jLabel2.setText("Parking Charges: ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(219, 176, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/BetaaldParkeren-1.png"))); // NOI18N
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJBtnActionPerformed

    private void completeJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeJBtnActionPerformed
        // TODO add your handling code here:

        int row = parkingReqJTbl.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        ParkingRequest wr = (ParkingRequest) parkingReqJTbl.getValueAt(row, 5);
        if (wr.getStatus().equals("CLOSED")||wr.getStatus().equals("CANCELLED")) {
            JOptionPane.showMessageDialog(null, "This request has already been closed/cancelled", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            JOptionPane.showMessageDialog(null, "Please assign to a user first then resolve.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        double charges = 0;
        try {
            charges = Double.parseDouble(parkingChargesJTxtField.getText());
        } catch (NumberFormatException numberFormatException) {

            JOptionPane.showMessageDialog(null, "Please enter a valid value in number format.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;

        }

//            for (Organisation org : enterprise.getOrganisationDirectory().getOrganizationlist()) {
//            if (org instanceof ParkingOrganisation) {
//                ParkingOrganisation parkOrg = (ParkingOrganisation) org;
//                System.out.println("parkorg= " + parkOrg.getParkSlots().size());
//                for (Parking park : parkOrg.getParkSlots()) {
//
//                    if (wr.getParkingLoc().equals(park.getLocation())) {
//                        park.bookParking(wr.getNumOfSlots());
//                    }
//                }
//
//            }
//
//        }
        wr.setStatus("CLOSED");
        wr.setMessage("The paking slot has been assigned to you successfully. Please contact society admin for any issue. Request charge- $ " + charges);
        Date resolveDate = new Date();
        wr.setResolveDate(resolveDate);
        wr.setReqCharges(charges);

        wr.getCust().debitMoney(wr, charges);

        // double walletAcc= wr.getCust().getWallet();
        // double newWalletAmt= walletAcc-charges;
        // wr.getCust().setWallet(newWalletAmt);
        //wr.getCust().addParking(wr.getParkingLoc(), wr.getNumOfSlots());
        organization.setMoneyBalance(charges);

        wr.getCust().getNotification().addNotification(wr);

        JOptionPane.showMessageDialog(null, "The request has been completed. Request charge- $ " + charges, "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
        populateTable();


    }//GEN-LAST:event_completeJBtnActionPerformed

    private void assignToJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToJBtnActionPerformed
        // TODO add your handling code here:

        int row = parkingReqJTbl.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Employee emp = (Employee) parkingStaffJComboBox.getSelectedItem();
        WorkRequest wr = (WorkRequest) parkingReqJTbl.getValueAt(row, 5);

        if (wr.getStatus().equals("CLOSED")) {
            JOptionPane.showMessageDialog(null, "The request is already completed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getStatus().equals("CANCELLED")) {
            JOptionPane.showMessageDialog(null, "This request has already been cancelled.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (wr.getReceiver() == null) {
            emp.getWorkQueue().getReqList().add(wr);
            System.out.println(emp.getEmpUserAcc().getUserName());
            System.out.println("emp size: " + emp.getWorkQueue().getReqList().size());
            //  Row[4]= em.getEmpUserAcc().getWorkQueue().getReqList().size())
            wr.setReceiver(emp.getEmpUserAcc());
            wr.setSender(account);
            wr.getCust().getNotification().addNotification(wr);

            JOptionPane.showMessageDialog(null, "The request has been successfully assigned", "Information", JOptionPane.INFORMATION_MESSAGE);

            populateTable();
        }
    }//GEN-LAST:event_assignToJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignToJBtn;
    private javax.swing.JButton backJBtn;
    private javax.swing.JButton completeJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField parkingChargesJTxtField;
    private javax.swing.JTable parkingReqJTbl;
    private javax.swing.JComboBox<Object> parkingStaffJComboBox;
    // End of variables declaration//GEN-END:variables
}
