/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Market;

import Business.Customer.Customer;
import Business.Customer.Product;
import Business.Ecosystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organisation.DeliveryOrganisation;
import Business.Organisation.Grocery.GroceryOrganisation;
import Business.Organisation.Grocery.GroceryProduct;
import Business.Organisation.Organisation;
import Business.Organisation.OrganisationDirectory;
import Business.UserAccount.UserAccount;
import Business.Utility.Wallet;
import Business.WorkQueue.DeliverWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author ajaygoel
 */
public class ManageOrdersJPanel extends javax.swing.JPanel {

    /**
     * Creates new form GroceryWAJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    GroceryOrganisation organization;
    Enterprise enterprise;
    Ecosystem business;
    int count_automatic = 0;
    double sales= 0.0;
    DeliveryOrganisation org;
    GroceryOrganisation groceryOrganisation;

    ManageOrdersJPanel(JPanel userProcessContainer, UserAccount account, Organisation organisation1, Enterprise enterprise, Ecosystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.organization = (GroceryOrganisation) organisation1;
        this.business = business;
        this.enterprise = enterprise;
        
        for(Network n1:business.getNetworkDirectory())
        {
            for(Enterprise e:n1.getEnterpriseDirectory().getEnterpriseList())
            for (Organisation organization : e.getOrganisationDirectory().getOrganizationlist()) {
                    if (organization instanceof GroceryOrganisation) {
                        groceryOrganisation =  (GroceryOrganisation) organization;
                        break;
                    }
                }
        
        }
        
        
        populate_table();
        send_automatic_requests();
        Wallet wallet = groceryOrganisation.getWalletObj();
        SalestxtField.setText(String.valueOf(wallet.getWalletAmount()));
        populate_automatic_requests_table();
        automatic_requests_txtfield.setText(String.valueOf(count_automatic));
        
        
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        orderListJTbl = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        deliverJBtn = new javax.swing.JButton();
        cancelOrderJBtn = new javax.swing.JButton();
        SalestxtField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        MessageTxtField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        automatic_requests_txtfield = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        automaticJtable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 255, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        orderListJTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Detail", "Status live", "Product", "Status", "Receiver", "Request Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderListJTbl);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 708, 126));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Order Details");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 40, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Manage Orders");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 219, -1, -1));

        deliverJBtn.setText("Deliver Order");
        deliverJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deliverJBtnActionPerformed(evt);
            }
        });
        add(deliverJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(81, 219, 220, -1));

        cancelOrderJBtn.setText("Cancel Order");
        cancelOrderJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderJBtnActionPerformed(evt);
            }
        });
        add(cancelOrderJBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 220, 143, -1));
        add(SalestxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 220, 125, -1));

        jLabel4.setText("Total Sales :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 220, -1, -1));
        add(MessageTxtField, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 260, 210, 80));

        jLabel1.setText("Message:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, -1, -1));

        jLabel5.setText("Automatic Requests Processed :");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));
        add(automatic_requests_txtfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 350, 50, -1));

        automaticJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Customer", "Message", "Product", "Status", "Request Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(automaticJtable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 490, 700, 150));

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel6.setText("Automatic Requests Details:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pics/orders.jpg"))); // NOI18N
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 120, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populate_table() {
           DefaultTableModel model = (DefaultTableModel) orderListJTbl.getModel();
        model.setRowCount(0);
        
        for (WorkRequest wr : organization.getWorkQueue().getReqList()) {
            
            if(wr.getCust()!=null)
            {
                Object[] row = new Object[6];
                row[0]=wr.getCust();
                row[1]=wr.getStatus();
                row[2]=wr.getProduct();
                row[3]=wr;
                row[4]=wr.getReceiver();
                row[5]=wr.getRequestDate();
                model.addRow(row);
                
                if(wr.getStatus().equals("Delivered"))
                {
                    sales=sales+wr.getProduct().getPrice();
                    SalestxtField.setText(String.valueOf(sales));
                }

            }
                                
        }

    }

    public void send_automatic_requests() {
        for (WorkRequest wr : organization.getWorkQueue().getReqList()) {
            if (wr.getStatus().equals("Automatically generated")) {
          
                  wr.setStatus("Automatic sent to Delivery");
//                wr.setMessage("Automatic sent to Delivery");
//                DeliverWorkRequest request = new DeliverWorkRequest();
//                request.setMessage(wr.getMessage());
//                request.setSender(account);
//                request.setStatus("Automatically generated");
//                request.setProduct(wr.getProduct());
//                request.setCust(wr.getCust());
                //Organisation org = null;
                
                for (Organisation organization : enterprise.getOrganisationDirectory().getOrganizationlist()) {
                    if (organization instanceof DeliveryOrganisation) {
                        org = (DeliveryOrganisation) organization;
                        break;
                    }
                }
                
                for(Product ps:wr.getCust().getProdList())
                {
                    if(ps==wr.getProduct())
                    {
                        ps.setOrder_status("Automatic sent to Delivery");
                    }
                }

                if (org != null) {
                    org.getWorkQueue().getReqList().add(wr);
                    account.getWorkQueue().getReqList().add(wr);
                    double amountTOAdd=0;
                        amountTOAdd = Double.valueOf(wr.getProduct().getPrice());
                            groceryOrganisation.addMoney(amountTOAdd);//*0.9);
                        groceryOrganisation.debitMoney(wr,amountTOAdd*0.1);
                    count_automatic++;
                    
                     for(GroceryProduct gp:groceryOrganisation.getGroceryProductDirectory())
                            {
                                if(wr.getProduct().getName().equals(gp.getProdName()))
                                {
                                    gp.setAvail(gp.getAvail()-wr.getProduct().getProductQuant());
                                }
                            }
                     
                }

            }
            populate_table();
        }



    }
    
    public void populate_automatic_requests_table()
    {
        DefaultTableModel model = (DefaultTableModel) automaticJtable.getModel();
        model.setRowCount(0);
        
        for (WorkRequest wr : organization.getWorkQueue().getReqList()) {
            if (wr.getMessage().equals("Automatically generated")||wr.getMessage().equals("Automatic sent to Delivery")) {
                Object[] row = new Object[6];
                row[0]=wr.getCust();
                row[1]=wr.getMessage();
                row[2]=wr.getProduct();
                row[3]=wr;
                row[4]=wr.getRequestDate();
                row[5]=wr.getStatus();
                model.addRow(row);
            }
        }
        
        
        
    }
    
    

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void deliverJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deliverJBtnActionPerformed
        // TODO add your handling code here:

        int row = orderListJTbl.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        
        WorkRequest wr1 = (WorkRequest) orderListJTbl.getValueAt(row,3);
        
        //Organisation org = null;
                        for (Organisation organization : enterprise.getOrganisationDirectory().getOrganizationlist()) {
                            if (organization instanceof DeliveryOrganisation) {
                                org = (DeliveryOrganisation) organization;
                                break;
                            }
                        }
                        
                       
                        
                        if(wr1.getStatus().equals("Delivered")){
             JOptionPane.showMessageDialog(null, "This request has already been closed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
                        if(wr1.getStatus().equals("Automatic sent to Delivery")){
             JOptionPane.showMessageDialog(null, "This request has already been processed", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
                       if (org != null) { 
        org.getWorkQueue().getReqList().add(wr1);
        wr1.setStatus("Pending at delivery");
        account.getWorkQueue().getReqList().add(wr1);
        wr1.getCust().getNotification().addNotification(wr1); 
                       }
        
        Customer c1 = (Customer) orderListJTbl.getValueAt(row, 0);
        for (Product p1 : c1.getProdList()) {
            if (p1 != null) {
                //if (p1.getName().equals(prod.getName())) {
                if (p1 ==wr1.getProduct()) {
                    if (p1.getOrder_status().equals("Pending at Grocery Market")) {
                        p1.setOrder_status("Pending to be delivered");

                        //String message = MessageTxtField.getText();

//                        DeliverWorkRequest request = new DeliverWorkRequest();
//                        request.setMessage(message);
//                        request.setSender(account);
//                        request.setStatus("sent");
//                        request.setProduct(p1);
//                        request.setCust(c1);
//                        Date date = new Date();
//                        request.setRequestDate(date);
//                        Organisation org = null;
//                        for (Organisation organization : enterprise.getOrganisationDirectory().getOrganizationlist()) {
//                            if (organization instanceof DeliveryOrganisation) {
//                                org = organization;
//                                break;
//                            }
//                        }
//
//                        if (org != null) {
//                            org.getWorkQueue().getReqList().add(request);
//                            
//                        }
                        double amountTOAdd=0;
                        amountTOAdd = Double.valueOf(wr1.getProduct().getPrice());
                        groceryOrganisation.addMoney(amountTOAdd);//*0.9);
                        groceryOrganisation.debitMoney(wr1,amountTOAdd*0.1);
                        JOptionPane.showMessageDialog(null, "The money has been successfully added.", "Information", JOptionPane.INFORMATION_MESSAGE);
                        JOptionPane.showMessageDialog(null, "Product added at delivery end", "Information", JOptionPane.INFORMATION_MESSAGE);
                        
                        for(GroceryProduct gp:groceryOrganisation.getGroceryProductDirectory())
                            {
                                if(p1.getName().equals(gp.getProdName()))
                                {
                                    gp.setAvail(gp.getAvail()-p1.getProductQuant());
                                }
                            }
                        
                        populate_table();
                    } else if (p1.getOrder_status().equals("Pending to be delivered")) {
                        JOptionPane.showMessageDialog(null, "This is already at delivery end", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    } else if (p1.getOrder_status().equals("Cancelled")) {
                        JOptionPane.showMessageDialog(null, "This product is cancelled.", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    

                }
            }

        }


    }//GEN-LAST:event_deliverJBtnActionPerformed

    private void cancelOrderJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderJBtnActionPerformed
        // TODO add your handling code here:

     
        int row = orderListJTbl.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        
        WorkRequest wr1 = (WorkRequest) orderListJTbl.getValueAt(row,3);
        
        //Organisation org = null;
                        for (Organisation organization : enterprise.getOrganisationDirectory().getOrganizationlist()) {
                            if (organization instanceof DeliveryOrganisation) {
                                org = (DeliveryOrganisation) organization;
                                break;
                            }
                        }
                        
                       
                        
                        if(wr1.getStatus().equals("Cancelled")){
             JOptionPane.showMessageDialog(null, "This request has already been cancelled", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
                       if (org != null) { 
        org.getWorkQueue().getReqList().add(wr1);
        wr1.setStatus("Cancelled");
        account.getWorkQueue().getReqList().add(wr1);
        wr1.getCust().getNotification().addNotification(wr1);
                       }
        
        Customer c1 = (Customer) orderListJTbl.getValueAt(row, 0);
        for (Product p1 : c1.getProdList()) {
            if (p1 != null) {
                //if (p1.getName().equals(prod.getName())) {
                if (p1 ==wr1.getProduct()) {
                    if (p1.getOrder_status().equals("Pending at Grocery Market")) {
                        p1.setOrder_status("Cancelled");
                         double amountTOdel=0;
                        amountTOdel = Double.valueOf(wr1.getProduct().getPrice());
                        wr1.getCust().addMoney(amountTOdel);

                        //String message = MessageTxtField.getText();

//                        DeliverWorkRequest request = new DeliverWorkRequest();
//                        request.setMessage(message);
//                        request.setSender(account);
//                        request.setStatus("sent");
//                        request.setProduct(p1);
//                        request.setCust(c1);
//                        Date date = new Date();
//                        request.setRequestDate(date);
//                        Organisation org = null;
//                        for (Organisation organization : enterprise.getOrganisationDirectory().getOrganizationlist()) {
//                            if (organization instanceof DeliveryOrganisation) {
//                                org = organization;
//                                break;
//                            }
//                        }
//
//                        if (org != null) {
//                            org.getWorkQueue().getReqList().add(request);
//                            
//                        }
                        JOptionPane.showMessageDialog(null, "Product cancelled", "Information", JOptionPane.INFORMATION_MESSAGE);
                        populate_table();
                    } else if (p1.getOrder_status().equals("Cancelled")) {
                        JOptionPane.showMessageDialog(null, "This product is cancelled.", "Warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }

                }
            }

        }

    }//GEN-LAST:event_cancelOrderJBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MessageTxtField;
    private javax.swing.JTextField SalestxtField;
    private javax.swing.JTable automaticJtable;
    private javax.swing.JTextField automatic_requests_txtfield;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton cancelOrderJBtn;
    private javax.swing.JButton deliverJBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderListJTbl;
    // End of variables declaration//GEN-END:variables
}
